name: ValorantSL Auto Deployment

on:
  push:
    branches: [ master, main ]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass
    
    - name: Deploy to production server
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
      run: |
        echo "üöÄ Deploying to production server..."
        
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
          set -e
          
          echo "üìÅ Navigating to project directory..."
          cd ~/valorantsl-new
          
          echo "üì• Pulling latest changes..."
          git pull origin master
          
          echo "üßπ Cleaning up old Docker images and system..."
          docker system prune -f --volumes
          # Remove old images for this project specifically
          docker images --format "table {{.Repository}}:{{.Tag}}" | grep "valorantsl-new" | awk '{print $1}' | xargs -r docker rmi -f || true
          
          echo "üöÄ Building all services with no cache (keeping old containers running)..."
          docker compose -f docker-compose.prod.yml build --no-cache
          
          echo "‚ö° Quick swap: stopping old containers and starting new ones..."
          docker compose -f docker-compose.prod.yml down --remove-orphans
          docker compose -f docker-compose.prod.yml up -d
          
          echo "‚úÖ Zero-downtime deployment completed successfully"
        EOF
    
    - name: Verify deployment
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
      run: |
        echo "üîç Verifying deployment..."
        
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'EOF'
          set -e
          
          cd ~/valorantsl-new
          
          echo "‚è≥ Waiting for services to start..."
          sleep 20
          
          echo "üìä Service status:"
          docker compose -f docker-compose.prod.yml ps
          
          echo "üè• Testing frontend availability..."
          if curl -f -s http://localhost:80 > /dev/null 2>&1; then
            echo "‚úÖ Frontend is responding"
          else
            echo "‚ö†Ô∏è Frontend not responding yet"
          fi
          
          echo "üéâ Deployment verification completed!"
        EOF
        
        echo "üåê Services available at:"
        echo "  - Frontend: https://valorantsl.com"
        echo "  - API: https://api.valorantsl.com"