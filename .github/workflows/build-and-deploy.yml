name: ValorantSL Auto Deployment
# Builds images in GitHub Actions with optimized memory management
# and deploys pre-built images to production server

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/frontend:latest
          build-args: |
            REACT_APP_API_URL=https://api.valorantsl.com
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push updater image
        uses: docker/build-push-action@v5
        with:
          context: ./updater
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/updater:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push discord-bot image
        uses: docker/build-push-action@v5
        with:
          context: ./discord-bot
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}/discord-bot:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy to production server
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            set -e

            echo "ðŸ”‘ Logging into GitHub Container Registry..."
            echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_ACTOR" --password-stdin

            echo "ðŸ“¥ Pulling latest images..."
            docker pull ghcr.io/$GITHUB_REPOSITORY/frontend:latest
            docker pull ghcr.io/$GITHUB_REPOSITORY/backend:latest
            docker pull ghcr.io/$GITHUB_REPOSITORY/updater:latest
            docker pull ghcr.io/$GITHUB_REPOSITORY/discord-bot:latest

            cd ~/valorantsl-new

            echo "âš¡ Stopping old services..."
            docker compose -f docker-compose.prod.yml down --remove-orphans

            echo "ðŸš€ Starting services with new images..."
            docker compose -f docker-compose.prod.yml up -d

            echo "âœ… Deployment completed"
          EOF
