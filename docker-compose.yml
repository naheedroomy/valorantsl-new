services:
  # FastAPI Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: valorantsl-backend
    restart: unless-stopped
    env_file:
      - .env  # Use root-level consolidated .env file
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app:ro
    healthcheck:
      test: curl -f http://localhost:8000/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # React Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: valorantsl-frontend
    restart: unless-stopped
    env_file:
      - .env  # Use root-level consolidated .env file
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: curl -f http://localhost:80/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Player Data Updater Service
  updater:
    build:
      context: ./updater
      dockerfile: Dockerfile
    container_name: valorantsl-updater
    restart: unless-stopped
    env_file:
      - .env  # Use root-level consolidated .env file
    volumes:
      - ./updater/logs:/app/logs  # Persist logs
    depends_on:
      - backend
    healthcheck:
      test: python -c "import os; print('Updater is running')" || exit 1
      interval: 5m
      timeout: 30s
      retries: 3
      start_period: 30s

  # Discord Bot Service (Role & Nickname Management)
  discord-bot:
    build:
      context: ./discord-bot
      dockerfile: Dockerfile
    container_name: valorantsl-discord-bot
    restart: unless-stopped
    env_file:
      - .env  # Use root-level consolidated .env file
#    volumes:
#      - ./discord-bot/logs:/app/logs  # Persist logs
    healthcheck:
      test: python -c "import sys; sys.exit(0)" || exit 1
      interval: 5m
      timeout: 30s
      retries: 3
      start_period: 30s